import telebot
import configure
import sqlite3
from telebot import types
import threading
from requests import get
from time import sleep
from SimpleQIWI import *

client = telebot.TeleBot(configure.config['token'])
db = sqlite3.connect('baza.db', check_same_thread=False)
sql = db.cursor()
lock = threading.Lock()
api = QApi(token=configure.config['tokenqiwi'], phone=configure.config['phoneqiwi'])
markdown = """
    *bold text*
    _italic text_
    [text](URL)
    """

#database

sql.execute("""CREATE TABLE IF NOT EXISTS users (id BIGINT, nick TEXT, cash INT, access INT, bought INT)""")
sql.execute("""CREATE TABLE IF NOT EXISTS shop (id INT, name TEXT, price INT, tovar TEXT)""")
db.commit()

@client.message_handler(commands=['start'])
def start(message):
	getname = message.from_user.first_name
	cid = message.chat.id
	uid = message.from_user.id

	sql.execute(f"SELECT id FROM users WHERE id = {uid}")
	if sql.fetchone() is None:
		sql.execute(f"INSERT INTO users VALUES ({uid}, '{getname}', 0, 0, 0)")
		client.send_message(cid, f"üõí | –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {getname}!\n–¢—ã –ø–æ–ø–∞–ª –≤ –±–æ—Ç–∞ –º–∞–≥–∞–∑–∏–Ω\n–ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç!")
		db.commit()
	else:
		client.send_message(cid, f"‚õîÔ∏è | –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ü—Ä–æ–ø–∏—à–∏ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.")


@client.message_handler(commands=['profile', 'myinfo', 'myprofile'])
def myprofile(message):
	cid = message.chat.id
	uid = message.from_user.id
	sql.execute(f"SELECT * FROM users WHERE id = {uid}")
	getaccess = sql.fetchone()[3]
	if getaccess == 0:
		accessname = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
	elif getaccess == 1:
		accessname = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
	elif getaccess == 777:
		accessname = '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'
	for info in sql.execute(f"SELECT * FROM users WHERE id = {uid}"):
		client.send_message(cid, f"*–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:*\n\n–í–∞—à ID: {info[0]}\n–ë–∞–ª–∞–Ω—Å: {info[2]}\n–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: {accessname}\n–ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {info[4]}", parse_mode='Markdown')

@client.message_handler(commands=['getprofile', 'info'])
def getprofile(message):
	cid = message.chat.id
	uid = message.from_user.id
	sql.execute(f"SELECT * FROM users WHERE id = {uid}")
	getaccess = sql.fetchone()[3]
	accessquery = 1
	if getaccess < accessquery:
		client.send_message(cid, '‚ö†Ô∏è | –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')
	else:
		for info in sql.execute(f"SELECT * FROM users WHERE id = {uid}"):
			msg = client.send_message(cid, f'–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n–ü—Ä–∏–º–µ—Ä: {info[0]}')
			client.register_next_step_handler(msg, getprofile_next)

def getprofile_next(message):
	cid = message.chat.id
	uid = message.from_user.id
	if message.text == message.text:
		getprofileid = message.text
		for info in sql.execute(f"SELECT * FROM users WHERE id = {getprofileid}"):
			if info[3] == 0:
				accessname = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
			elif info[3] == 1:
				accessname = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
			elif info[3] == 777:
				accessname = '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'
			client.send_message(cid, f"*–ü—Ä–æ—Ñ–∏–ª—å {info[1]}:*\n\n–í–∞—à ID: {info[0]}\n–ë–∞–ª–∞–Ω—Å: {info[2]}\n–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: {accessname}\n–ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {info[4]}",parse_mode='Markdown')

@client.message_handler(commands=['addbuy'])
def addbuy(message):
	cid = message.chat.id
	uid = message.from_user.id
	with lock:
		sql.execute(f"SELECT * FROM users WHERE id = {uid}")
		getaccess = sql.fetchone()[3]
	if getaccess < 1:
		client.send_message(cid, '‚ö†Ô∏è | –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')
	else:
		msg = client.send_message(cid, '*–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞:*',parse_mode='Markdown')
		client.register_next_step_handler(msg, addbuy_id)

def addbuy_id(message):
	cid = message.chat.id
	uid = message.from_user.id
	if message.text == message.text:
		global addbuyid
		addbuyid = message.text
		msg = client.send_message(cid, '*–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:*',parse_mode='Markdown')
		client.register_next_step_handler(msg, addbuy_price)

def addbuy_price(message):
	cid = message.chat.id
	uid = message.from_user.id
	if message.text == message.text:
		global addbuyprice
		addbuyprice = message.text
		msg = client.send_message(cid, '*–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:*',parse_mode='Markdown')
		client.register_next_step_handler(msg, addbuy_name)

def addbuy_name(message):
	cid = message.chat.id
	uid = message.from_user.id
	if message.text == message.text:
		global addbuyname
		addbuyname = message.text
		msg = client.send_message(cid, '*–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:*',parse_mode='Markdown'	)
		client.register_next_step_handler(msg, addbuy_result)

def addbuy_result(message):
	cid = message.chat.id
	uid = message.from_user.id
	if message.text == message.text:
		global addbuytovar
		addbuytovar = message.text
		sql.execute(f"SELECT name FROM shop WHERE name = '{addbuyname}'")
		if sql.fetchone() is None:
			sql.execute(f"INSERT INTO shop VALUES ({addbuyid}, '{addbuyname}', {addbuyprice}, '{addbuytovar}')")
			db.commit()
			sql.execute(f"SELECT * FROM shop WHERE name = '{addbuyname}'")
			client.send_message(cid, f'‚úÖ | –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–æ–≤–∞—Ä\nID —Ç–æ–≤–∞—Ä–∞: {sql.fetchone()[0]}\n–ò–º—è: {addbuyname}\n–¶–µ–Ω–∞: {addbuyprice}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {addbuytovar}')
		else:
			client.send_message(cid, f"‚õîÔ∏è | –î–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!")

@client.message_handler(commands=['buy'])
def buy(message):
	cid = message.chat.id
	uid = message.from_user.id

	text = 'üõí | *–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤*\n\n'
	for info in sql.execute(f"SELECT * FROM users WHERE id = {uid}"):
		for infoshop in sql.execute(f"SELECT * FROM shop"):
			text += f"{infoshop[0]}. {infoshop[1]}\n–¶–µ–Ω–∞: {infoshop[2]}\n\n"
		msg = client.send_message(cid, f'{text}\n\n–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–π–¥–∏ —Ç–æ–≤–∞—Ä–∞\n–ü—Ä–∏–º–µ—Ä: 1',parse_mode='Markdown')
		client.register_next_step_handler(msg, buy_next)

def buy_next(message):
	cid = message.chat.id
	uid = message.from_user.id
	if message.text == message.text:
		global tovarid
		tovarid = int(message.text)
		for info in sql.execute(f"SELECT * FROM users WHERE id = {uid}"):
			for infoshop in sql.execute(f"SELECT * FROM shop WHERE id = {tovarid}"):
				if info[2] < infoshop[2]:
					client.send_message(cid, '‚ö†Ô∏è | –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞!\n\n–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç –Ω–∞–ø–∏—à–∏—Ç–µ /donate')
				else:
					rmk = types.InlineKeyboardMarkup()
					item_yes = types.InlineKeyboardButton(text='–î–∞',callback_data='buytovaryes')
					item_no = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞',callback_data='buytovarno')
					rmk.add(item_yes, item_no)
					msg = client.send_message(cid, f"üí∏ | –í—ã –ø–æ–¥–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞?\n\n–í–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞ –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –ù–ï–í–û–ó–ú–û–ñ–ù–û.",reply_markup=rmk)

@client.callback_query_handler(lambda call: call.data == 'buytovaryes' or call.data == 'buytovarno')
def buy_callback(call):
	if call.data == 'buytovaryes':
		for info in sql.execute(f"SELECT * FROM users WHERE id = {call.from_user.id}"):
			for infoshop in sql.execute(f"SELECT * FROM shop WHERE id = {tovarid}"):
				cashtovar = int(info[2] - infoshop[2])
				boughttovar = int(info[4] + 1)
				sql.execute(f"SELECT * FROM users WHERE id = {call.from_user.id}")
				client.delete_message(call.message.chat.id, call.message.message_id-0)
				client.send_message(call.message.chat.id, f"‚úÖ | –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä\n\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {infoshop[1]}\n–¶–µ–Ω–∞: {infoshop[2]}\n\n–¢–æ–≤–∞—Ä: {infoshop[3]}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
				sql.execute(f"UPDATE users SET cash = {cashtovar} WHERE id = {call.from_user.id}")
				sql.execute(f"UPDATE users SET bought = {boughttovar} WHERE id = {call.from_user.id}")
				db.commit()
	elif call.data == 'buytovarno':
		client.send_message(call.message.chat.id, f"‚ùå | –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞!")
	client.answer_callback_query(callback_query_id=call.id)

@client.message_handler(commands=['donate'])
def donate(message):
	cid = message.chat.id
	global uid
	uid = message.from_user.id


	msg = client.send_message(cid, f"*üí∞ | –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:*",parse_mode='Markdown')
	client.register_next_step_handler(msg, donate_value)

def donate_value(message):
	cid = message.chat.id
	uid = message.from_user.id
	if message.text == message.text:
		global donatevalue
		global commentdonate
		global getusername
		global getuserdonateid
		getusername = message.from_user.first_name
		getuserdonateid = message.from_user.id
		sql.execute(f"SELECT * FROM users WHERE id = {uid}")
		commentdonate = sql.fetchone()[0]
		donatevalue = int(message.text)
		rmk = types.InlineKeyboardMarkup()
		item_yes = types.InlineKeyboardButton(text='–î–∞',callback_data='donateyes')
		item_no = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞',callback_data='donateno')
		rmk.add(item_yes, item_no)
		global qiwibalancebe
		qiwibalancebe = api.balance
		msg = client.send_message(cid, f"üî∞ | –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞?",parse_mode='Markdown',reply_markup=rmk)

def donateyesoplacheno(message):
	cid = message.chat.id
	uid = message.from_user.id
	removekeyboard = types.ReplyKeyboardRemove()
	if message.text == '‚úÖ –û–ø–ª–∞—á–µ–Ω–æ':
		client.send_message(cid, f"‚úâÔ∏è | –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, –æ–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏ –≤—ã–¥–∞—á–∏ —Å—Ä–µ–¥—Å—Ç–≤.",reply_markup=removekeyboard)
		client.send_message(596060542, f"‚úâÔ∏è | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {getusername} –æ–ø–ª–∞—Ç–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤\n\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {getuserdonateid}\n–°—É–º–º–∞: {donatevalue}‚ÇΩ\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {commentdonate}\n\n–ë–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ QIWI —Ä–∞–Ω—å—à–µ: {qiwibalancebe}\n–ë–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ QIWI —Å–µ–π—á–∞—Å: {api.balance}\n\n–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã –∑–∞—Ç–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–¥–∞—á—É —Å—Ä–µ–¥—Å—Ç–≤.\n–î–ª—è –≤—ã–¥–∞—á–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞–ø–∏—à–∏—Ç–µ: /giverub")

@client.callback_query_handler(lambda call: call.data == 'donateyes' or call.data == 'donateno')
def donate_result(call):
	removekeyboard = types.ReplyKeyboardRemove()
	rmk = types.ReplyKeyboardMarkup(resize_keyboard=True)
	rmk.add(types.KeyboardButton('‚úÖ –û–ø–ª–∞—á–µ–Ω–æ'))
	if call.data == 'donateyes':
		client.delete_message(call.message.chat.id, call.message.message_id-0)
		msg = client.send_message(call.message.chat.id, f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n‚òéÔ∏è –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã: +380661696196\nüí∞ –°—É–º–º–∞: {donatevalue}‚ÇΩ\nüí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {commentdonate}\n*‚ö†Ô∏è–í–ê–ñ–ù–û‚ö†Ô∏è* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —Å—É–º–º–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å *1–≤1*\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ",parse_mode='Markdown',reply_markup=rmk)
		client.register_next_step_handler(msg, donateyesoplacheno)
	elif call.data == 'donateno':
		client.send_message(call.message.chat.id, f"‚ùå | –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤",reply_markup=removekeyboard)
	client.answer_callback_query(callback_query_id=call.id)

@client.message_handler(commands=['getcid'])
def getcid(message):
	client.send_message(message.chat.id, f"ID —á–∞—Ç–∞ | {message.chat.id}\n–¢–≤–æ–π ID | {message.from_user.id}")

@client.message_handler(commands=['help'])
def helpcmd(message):
	cid = message.chat.id
	uid = message.from_user.id
	with lock:
		sql.execute(f"SELECT * FROM users WHERE id = {uid}")
		getaccess = sql.fetchone()[3]
	if getaccess >= 1:
		client.send_message(cid, '*–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*\n\n/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n/help - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/buy - –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä\n\n–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n\n/info - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—É–∂–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n/access - –í—ã–¥–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞\n/giverub - –í—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å\n/getid - –£–∑–Ω–∞—Ç—å –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',parse_mode='Markdown')
	else:
		client.send_message(cid, '*–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*\n\n/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n/help - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/buy - –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä',parse_mode='Markdown')

@client.message_handler(commands=['access', 'setaccess', 'dostup'])
def setaccess(message):
	cid = message.chat.id
	uid = message.from_user.id
	sql.execute(f"SELECT * FROM users WHERE id = {uid}")
	getaccess = sql.fetchone()[3]
	accessquery = 777
	if getaccess < accessquery:
		client.send_message(cid, f"‚ö†Ô∏è | –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
	else:
		for info in sql.execute(f"SELECT * FROM users WHERE id = {uid}"):
			msg = client.send_message(cid, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n–ü—Ä–∏–º–µ—Ä: 596060542', parse_mode="Markdown")
			client.register_next_step_handler(msg, access_user_id_answer)

def access_user_id_answer(message):
	cid = message.chat.id
	uid = message.from_user.id
	if message.text == message.text:
		global usridaccess
		usridaccess = message.text
		rmk = types.ReplyKeyboardMarkup(resize_keyboard=True)
		rmk.add(types.KeyboardButton('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'), types.KeyboardButton('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'), types.KeyboardButton('–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'))
		msg = client.send_message(cid, '–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å?:', reply_markup=rmk, parse_mode="Markdown")
		client.register_next_step_handler(msg, access_user_access_answer)

def access_user_access_answer(message):
	global accessgaved
	global accessgavedname
	cid = message.chat.id
	uid = message.from_user.id
	rmk = types.InlineKeyboardMarkup()
	access_yes = types.InlineKeyboardButton(text='–î–∞',callback_data='setaccessyes')
	access_no = types.InlineKeyboardButton(text='–ù–µ—Ç',callback_data='setaccessno')
	rmk.add(access_yes, access_no)
	for info in sql.execute(f"SELECT * FROM users WHERE id = {usridaccess}"):
		if message.text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å":
			accessgavedname = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
			accessgaved = 0
		elif message.text == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
			accessgavedname = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
			accessgaved = 1
		elif message.text == "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫":
			accessgavedname = "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"
			accessgaved = 777

		client.send_message(cid, f'–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–¥–∞—á–∏:\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {usridaccess} ({info[1]})\n–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: {message.text}\n\n–í–µ—Ä–Ω–æ?', reply_markup=rmk)

@client.callback_query_handler(lambda call: call.data == 'setaccessyes' or call.data == 'setaccessno')
def access_user_gave_access(call):
	removekeyboard = types.ReplyKeyboardRemove()
	if call.data == 'setaccessyes':
		for info in sql.execute(f"SELECT * FROM users WHERE id = {usridaccess}"):
			sql.execute(f"UPDATE users SET access = {accessgaved} WHERE id = {usridaccess}")
			db.commit()
			client.delete_message(call.message.chat.id, call.message.message_id-0)
			client.send_message(call.message.chat.id, f'‚úÖ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {info[1]} –≤—ã–¥–∞–Ω —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ {accessgavedname}', reply_markup=removekeyboard)
	elif call.data == 'setaccessno':
		for info in sql.execute(f"SELECT * FROM users WHERE id = {usridaccess}"):
			client.delete_message(call.message.chat.id, call.message.message_id-0)
			client.send_message(call.message.chat.id, f'üö´ | –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–¥–∞—á—É —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ {accessgavedname} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {info[1]}', reply_markup=removekeyboard)
	client.answer_callback_query(callback_query_id=call.id)

@client.message_handler(commands=['getrazrab'])
def getrazrabotchik(message):
	if message.from_user.id == 596060542:
		sql.execute(f"UPDATE users SET access = 777 WHERE id = 596060542")
		client.send_message(message.chat.id, f"‚úÖ | –í—ã –≤—ã–¥–∞–ª–∏ —Å–µ–±–µ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
		db.commit()
	else:
		client.send_message(message.chat.id, f"‚õîÔ∏è | –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ!")

@client.message_handler(commands=['giverub', 'givedonate', 'givebal'])
def giverubles(message):
	cid = message.chat.id
	uid = message.from_user.id
	sql.execute(f"SELECT * FROM users WHERE id = {uid}")
	getaccess = sql.fetchone()[3]
	accessquery = 777
	if getaccess < accessquery:
		client.send_message(cid, f"‚ö†Ô∏è | –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
	else:
		for info in sql.execute(f"SELECT * FROM users WHERE id = {uid}"):
			msg = client.send_message(cid, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n–ü—Ä–∏–º–µ—Ä: 596060542', parse_mode="Markdown")
			client.register_next_step_handler(msg, rubles_user_id_answer)

def rubles_user_id_answer(message):
	cid = message.chat.id
	uid = message.from_user.id
	if message.text == message.text:
		global usridrubles
		usridrubles = message.text
		rmk = types.ReplyKeyboardMarkup(resize_keyboard=True)
		rmk.add(types.KeyboardButton('10'), types.KeyboardButton('100'), types.KeyboardButton('1000'), types.KeyboardButton('–î—Ä—É–≥–∞—è —Å—É–º–º–∞'))
		msg = client.send_message(cid, '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–¥–∞—á–∏:', reply_markup=rmk, parse_mode="Markdown")
		client.register_next_step_handler(msg, rubles_user_rubles_answer)

def rubles_user_rubles_answer(message):
	cid = message.chat.id
	uid = message.from_user.id
	global rublesgavedvalue
	removekeyboard = types.ReplyKeyboardRemove()
	rmk = types.InlineKeyboardMarkup()
	access_yes = types.InlineKeyboardButton(text='–î–∞',callback_data='giverublesyes')
	access_no = types.InlineKeyboardButton(text='–ù–µ—Ç',callback_data='giverublesno')
	rmk.add(access_yes, access_no)
	for info in sql.execute(f"SELECT * FROM users WHERE id = {usridrubles}"):
		if message.text == '10':
			rublesgavedvalue = 10
			client.send_message(cid, f'–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–¥–∞—á–∏:\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {usridrubles} ({info[1]})\n–°—É–º–º–∞: {rublesgavedvalue}\n\n–í–µ—Ä–Ω–æ?',reply_markup=rmk)
		elif message.text == '100':
			rublesgavedvalue = 100
			client.send_message(cid, f'–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–¥–∞—á–∏:\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {usridrubles} ({info[1]})\n–°—É–º–º–∞: {rublesgavedvalue}\n\n–í–µ—Ä–Ω–æ?',reply_markup=rmk)
		elif message.text == '1000':
			rublesgavedvalue = 1000
			client.send_message(cid, f'–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–¥–∞—á–∏:\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {usridrubles} ({info[1]})\n–°—É–º–º–∞: {rublesgavedvalue}\n\n–í–µ—Ä–Ω–æ?',reply_markup=rmk)
		elif message.text == '–î—Ä—É–≥–∞—è —Å—É–º–º–∞':
			msg = client.send_message(cid, f"*–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–¥–∞—á–∏:*",parse_mode='Markdown',reply_markup=removekeyboard)
			client.register_next_step_handler(msg, rubles_user_rubles_answer_other)

def rubles_user_rubles_answer_other(message):
	cid = message.chat.id
	uid = message.from_user.id
	global rublesgavedvalue
	rmk = types.InlineKeyboardMarkup()
	access_yes = types.InlineKeyboardButton(text='–î–∞',callback_data='giverublesyes')
	access_no = types.InlineKeyboardButton(text='–ù–µ—Ç',callback_data='giverublesno')
	rmk.add(access_yes, access_no)
	for info in sql.execute(f"SELECT * FROM users WHERE id = {usridrubles}"):
		if message.text == message.text:
			rublesgavedvalue = int(message.text)
			client.send_message(cid, f'–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–¥–∞—á–∏:\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {usridrubles} ({info[1]})\n–°—É–º–º–∞: {rublesgavedvalue}\n\n–í–µ—Ä–Ω–æ?',reply_markup=rmk)

@client.callback_query_handler(func=lambda call: call.data == 'giverublesyes' or call.data == 'giverublesno')
def rubles_gave_rubles_user(call):
	removekeyboard = types.ReplyKeyboardRemove()
	for info in sql.execute(f"SELECT * FROM users WHERE id = {usridrubles}"): 
		rubless = int(info[2] + rublesgavedvalue)
		if call.data == 'giverublesyes':
			for info in sql.execute(f"SELECT * FROM users WHERE id = {usridrubles}"):
				sql.execute(f"UPDATE users SET cash = {rubless} WHERE id = {usridrubles}")
				db.commit()
				client.delete_message(call.message.chat.id, call.message.message_id-0)
				client.send_message(call.message.chat.id, f'‚úÖ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {info[1]} –≤—ã–¥–∞–Ω–æ {rublesgavedvalue} —Ä—É–±–ª–µ–π', reply_markup=removekeyboard)
		elif call.data == 'giverublesno':
			for info in sql.execute(f"SELECT * FROM users WHERE id = {usridrubles}"):
				client.delete_message(call.message.chat.id, call.message.message_id-0)
				client.send_message(call.message.chat.id, f'üö´ | –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–¥–∞—á—É —Ä—É–±–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {info[1]}', reply_markup=removekeyboard)
		client.answer_callback_query(callback_query_id=call.id)

@client.message_handler(commands=['getid'])
def getiduser(message):
	cid = message.chat.id
	uid = message.from_user.id
	sql.execute(f"SELECT * FROM users WHERE id = {uid}")
	getaccess = sql.fetchone()[3]
	accessquery = 1
	if getaccess < accessquery:
		client.send_message(cid, f"‚ö†Ô∏è | –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
	else:
		msg = client.send_message(cid, '–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
		client.register_next_step_handler(msg, next_getiduser_name)

def next_getiduser_name(message):
	cid = message.chat.id
	uid = message.from_user.id
	if message.text == message.text:
		getusername = message.text
		sql.execute(f"SELECT * FROM users WHERE nick = '{getusername}'")
		result = sql.fetchone()[0]
		client.send_message(cid, f'üë§ | ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {result}')



client.polling(none_stop=True,interval=0)